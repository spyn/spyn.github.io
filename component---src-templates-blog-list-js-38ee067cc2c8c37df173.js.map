{"version":3,"sources":["webpack://flexible-gatsby/./src/components/seo.js","webpack://flexible-gatsby/./src/components/intro.js","webpack://flexible-gatsby/./src/templates/blog-list.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","className","render","data","this","props","siteTitle","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","keywords","map","node","key","fields","slug","frontmatter","img","childImageSharp","gatsbyImageData","Link","to","style","backgroundImage","images","fallback","src","excerpt","date","timeToRead","role","rel","React"],"mappings":"yJAYA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,GAASC,oBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACE,gBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKG,aAAaJ,MACzCD,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASL,IAEXQ,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,qICpDA,EAhCoB,WAChB,IAAQI,GAASC,oBAAe,YAAxBD,KAcV,OACE,gCACI,2BAASY,UAAU,SACf,2BACI,sBAAIA,UAAU,QAAQZ,EAAKG,aAAaJ,OACxC,6eAEJ,uBAAKa,UAAU,cACb,sBAAIA,UAAU,iBC6D5B,E,6FA/EEC,OAAA,WACE,IAAQC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKd,KAAKG,aAAaJ,MACnCmB,EAAQJ,EAAKK,kBAAkBC,MACrC,EAAkCL,KAAKC,MAAMK,YAArCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC3DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACE5B,MAAOkB,EACPY,SAAU,CAAC,SAAD,+IAEZ,uBAAKjB,UAAU,wBAEC,GAAfU,GACC,gBAAC,EAAD,MAGCJ,EAAMY,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,2BAASnB,UAAU,OAAOoB,IAAKD,EAAKE,OAAOC,MACxCH,EAAKI,YAAYC,KAChBL,EAAKI,YAAYC,IAAIC,iBACrBN,EAAKI,YAAYC,IAAIC,gBAAgBC,iBACnC,gBAAC,EAAAC,KAAD,CACEC,GAAIT,EAAKE,OAAOC,KAChBtB,UAAU,iBACV6B,MAAO,CACLC,gBAAgB,OAAQX,EAAKI,YAAYC,IAAIC,gBAAgBC,gBAAgBK,OAAOC,SAASC,IAA9E,OAIvB,uBAAKjC,UAAU,gBACb,sBAAIA,UAAU,cACZ,gBAAC,EAAA2B,KAAD,CAAMC,GAAIT,EAAKE,OAAOC,MAAOH,EAAKI,YAAYpC,QAEhD,yBAAIgC,EAAKe,SACT,wBAAMlC,UAAU,aACbmB,EAAKI,YAAYY,KADpB,QAGA,wBAAMnC,UAAU,cACbmB,EAAKiB,WADR,qBAOR,uBAAKpC,UAAU,aACb,uBAAKA,UAAU,aAAaqC,KAAK,cAC/B,2BACIzB,GACA,yBACE,gBAAC,EAAAe,KAAD,CAAMC,GAAId,EAAUwB,IAAI,OAAOtC,UAAU,eAAzC,mBADF,MAIgBU,EAJhB,OAIiCC,EAJjC,MAOAE,GACA,yBACE,gBAAC,EAAAc,KAAD,CAAMC,GAAIZ,EAAUsB,IAAI,OAAOtC,UAAU,eAAzC,eADF,MAIgBU,EAJhB,OAIiCC,EAJjC,W,GAhEM4B","file":"component---src-templates-blog-list-js-38ee067cc2c8c37df173.js","sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from 'react'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nconst IntroLayout = () => {\r\n    const { site } = useStaticQuery(\r\n        graphql`\r\n          query {\r\n            site {\r\n              siteMetadata {\r\n                title\r\n                description\r\n                author\r\n              }\r\n            }\r\n          }\r\n        `\r\n      )\r\n    \r\n  return (\r\n    <>\r\n        <article className=\"intro\">\r\n            <div>\r\n                <h1 className=\"glow\">{site.siteMetadata.title}</h1>\r\n                <p>Hi! My name is Matt, or other people may know me as Mattie or spyn. Currently I'm working at RAC as a Sitecore .NET Developer, on the main website, working closely with the UX team to provide an enjoyable experience for our members. I was at iiNet as a developer, working on customer servicing tools, such as Toolbox and the Signup forms. I'm interested in home automation, technology, programming, design, music, board games, skating and running. I'm also a Dad!</p>\r\n            </div>\r\n            <div className=\"intro-tags\">\r\n              <ul className=\"tag-list\">\r\n                \r\n              </ul>\r\n            </div>\r\n        </article>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IntroLayout","import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport DefaultLayout from '../components/layout'\r\nimport SEO from '../components/seo'\r\nimport IntroLayout from '../components/intro'\r\n\r\nclass BlogIndex extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const siteTitle = data.site.siteMetadata.title\r\n    const posts = data.allMarkdownRemark.edges\r\n    const { currentPage, numPages } = this.props.pageContext\r\n    const isFirst = currentPage === 1\r\n    const isLast = currentPage === numPages\r\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\r\n    const nextPage = (currentPage + 1).toString()\r\n\r\n    return (\r\n      <DefaultLayout>\r\n        <SEO\r\n          title={siteTitle}\r\n          keywords={[`mattie`, `mattie ellins`, `blog`, `mellins`, `matt ellins`, `matthew ellins`, `sitecore`, `code`, `rac.com.au`, `iinet.net.au`, `gatsby`, `javascript`, `react`]}\r\n        />\r\n        <div className=\"content-box clearfix\">\r\n\r\n        {currentPage == 1 && (\r\n          <IntroLayout />\r\n        )}\r\n\r\n          {posts.map(({ node }) => {\r\n            return (\r\n              <article className=\"post\" key={node.fields.slug}>\r\n                {node.frontmatter.img &&\r\n                  node.frontmatter.img.childImageSharp &&\r\n                  node.frontmatter.img.childImageSharp.gatsbyImageData && (\r\n                    <Link\r\n                      to={node.fields.slug}\r\n                      className=\"post-thumbnail\"\r\n                      style={{\r\n                        backgroundImage: `url(${node.frontmatter.img.childImageSharp.gatsbyImageData.images.fallback.src})`,\r\n                      }}\r\n                    />\r\n                  )}\r\n                <div className=\"post-content\">\r\n                  <h2 className=\"post-title\">\r\n                    <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\r\n                  </h2>\r\n                  <p>{node.excerpt}</p>\r\n                  <span className=\"post-date\">\r\n                    {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\r\n                  </span>\r\n                  <span className=\"post-words\">\r\n                    {node.timeToRead} minute read\r\n                  </span>\r\n                </div>\r\n              </article>\r\n            )\r\n          })}\r\n          <div className=\"container\">\r\n            <nav className=\"pagination\" role=\"pagination\">\r\n              <ul>\r\n                {!isFirst && (\r\n                  <p>\r\n                    <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\r\n                      ← Previous Page \r\n                    </Link>\r\n                    &nbsp;&nbsp;({currentPage} of {numPages})\r\n                  </p>\r\n                )}\r\n                {!isLast && (\r\n                  <p>\r\n                    <Link to={nextPage} rel=\"next\" className=\"older-posts\">\r\n                      Next Page → \r\n                    </Link>\r\n                    &nbsp;&nbsp;({currentPage} of {numPages})\r\n                  </p>\r\n                )}\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </DefaultLayout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query blogPageQuery($skip: Int!, $limit: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          timeToRead\r\n          frontmatter {\r\n            date(formatString: \"YYYY, MMM DD\")\r\n            title\r\n            img {\r\n              childImageSharp {\r\n                gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH, formats: [AUTO, AVIF, WEBP])\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}